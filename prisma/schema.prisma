// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// Tableegh tracking models
model Block {
    id          String   @id @default(cuid())
    name        String   @unique // e.g., "K Block", "M Block", "J Block"
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    people Contact[]
    visits Visit[]
}

model Contact {
    id          String   @id @default(cuid())
    name        String
    fatherName  String?
    phoneNumber String?
    houseNumber String?
    address     String?
    occupation  String?
    timings     String? // preferred meeting times
    notes       String?
    isMuslim    Boolean  @default(false)
    isInterested Boolean @default(false)

    blockId     String
    block       Block    @relation(fields: [blockId], references: [id])

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String

    visits      Visit[]

    @@index([name])
    @@index([blockId])
}

model Visit {
    id          String   @id @default(cuid())
    contactId   String
    contact     Contact  @relation(fields: [contactId], references: [id])

    blockId     String
    block       Block    @relation(fields: [blockId], references: [id])

    visitDate   DateTime @default(now())
    purpose     String   // "Dawat", "Follow-up", "Invitation", etc.
    response    String?  // Response received
    duration    Int?     // Duration in minutes
    followUpNeeded Boolean @default(false)
    followUpDate   DateTime?
    notes       String?

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String

    @@index([contactId])
    @@index([blockId])
    @@index([visitDate])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?   @unique
    email         String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]

    contacts      Contact[]
    visits        Visit[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
